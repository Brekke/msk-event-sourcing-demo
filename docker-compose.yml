version: '3'
services:
  elasticsearch:
    image: amazon/opendistro-for-elasticsearch:1.4.0
    container_name: elasticsearch
    environment:
      - cluster.name=elasticsearch-cluster
      - node.name=elasticsearch
      - discovery.seed_hosts=elasticsearch,elasticsearch-node2
      - cluster.initial_master_nodes=elasticsearch,elasticsearch-node2
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the Elasticsearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - es-data1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9600:9600 # required for Performance Analyzer
    networks:
      - net
  elasticsearch-node2:
    image: amazon/opendistro-for-elasticsearch:1.4.0
    container_name: elasticsearch-node2
    environment:
      - cluster.name=elasticsearch-cluster
      - node.name=elasticsearch-node2
      - discovery.seed_hosts=elasticsearch,elasticsearch-node2
      - cluster.initial_master_nodes=elasticsearch,elasticsearch-node2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - es-data2:/usr/share/elasticsearch/data
    networks:
      - net
  kibana:
    image: amazon/opendistro-for-elasticsearch-kibana:1.4.0
    container_name: kibana
    ports:
      - 5601:5601
    expose:
      - "5601"
    environment:
      ELASTICSEARCH_URL: https://elasticsearch:9200
      ELASTICSEARCH_HOSTS: https://elasticsearch:9200
    networks:
      - net
  zoo1:
    image: zookeeper
    container_name: zoo1
    restart: always
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_PORT: 2181
      COMPONENT: zookeeper
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - net
  zoo2:
    image: zookeeper
    container_name: zoo2
    restart: always
    hostname: zoo2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_PORT: 2181
      COMPONENT: zookeeper
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - net
  zoo3:
    image: zookeeper
    container_name: zoo3
    restart: always
    hostname: zoo3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
      ZOO_PORT: 2181
      COMPONENT: zookeeper
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - net
  kafka:
    image: 'wurstmeister/kafka'
    container_name: kafka
    hostname: kafka
    stop_grace_period: 120s
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    ports:
      - "9092:9092"
      - "8500:8500"
    environment:
      COMPONENT: kafka
      KAFKA_BROKER_ID: 1001
      KAFKA_RESERVED_BROKER_MAX_ID: 10000
      KAFKA_ZOOKEEPER_CONNECT: 'zoo1:2181,zoo2:2181,zoo3:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_JMX_OPTS: '-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Djava.net.preferIPv4Stack=true -Dcom.sun.management.jmxremote.rmi.port=8500'
    networks:
      - net    
  read-api:
    build: 'read-api/'
    container_name: read-api
    hostname: read-api
    stop_grace_period: 120s
    depends_on:
      - elasticsearch
      - elasticsearch-node2
    environment:
      COMPONENT: read-api
    networks:
      - net
  write-api:
    build: 'write-api/'
    container_name: write-api
    hostname: write-api
    stop_grace_period: 120s
    depends_on:
      - kafka
    environment:
      COMPONENT: write-api
    networks:
      - net
  projections:
    build: 'projections/'
    container_name: projections
    hostname: projections
    stop_grace_period: 120s
    depends_on:
      - kafka
    environment:
      COMPONENT: projections
    networks:
      - net
volumes:
  es-data1:
  es-data2:
networks:
  net:
